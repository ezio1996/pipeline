lui $t1, 0x1


# $t = (imm << 16); advance_pc (4);	
# The immediate value is shifted left 16 bits and stored in the register. The lower 16 bits are zeroes.
# 1*2^16 = 65536
# 
# REG:
#         $zero: 0        $at: 0  $v0: 0  $v1: 0  $a0: 0  $a1: 0  $a2: 0  $a3: 0
#         $t0: 0  $t1: 65536      $t2: 0  $t3: 0  $t4: 0  $t5: 0  $t6: 0  $t7: 0
#         $s0: 0  $s1: 0  $s2: 0  $s3: 0  $s4: 0  $s5: 0  $s6: 0  $s7: 0
#         $t8: 0  $t9: 0  $k0: 0  $k1: 0  $gp: 0  $sp: 0  $fp: 0  $ra: 0
# 
# pc:     0
# 
# Latch IFID:
#         IR: 0x00000000 00000000000000000000000000000000 noop
#         NPC: 4
# Latch IDEXE:
#         IR: 0x00000000 00000000000000000000000000000000 noop
#         NPC: 4
#         A: 0
#         B: 0
#         Imm: 65535
# Latch EXMEM:
#         IR: 0x3c090001 00111100000010010000000000000001 lui $t1 0x1
#         B: 0
#         ALUOutput: 65536
#         Cond: 0
# Latch MEMWB:
#         IR: 0x3c090001 00111100000010010000000000000001 lui $t1 0x1
#         ALUOutput: 65536
#         LMD: 0
# 
# STATISTIC:
#         Clock Cycle: 5
#         IF Utilization: 1, 20%
#         ID Utilization: 1, 20%
#         EX Utilization: 1, 20%
#         MEM Utilization: 0, 0%
#         WB Utilization: 1, 20%
